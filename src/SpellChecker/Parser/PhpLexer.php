<?php declare(strict_types = 1);

namespace SpellChecker\Parser;

use const T_ABSTRACT;
use const T_AND_EQUAL;
use const T_ARRAY;
use const T_ARRAY_CAST;
use const T_AS;
use const T_BOOLEAN_AND;
use const T_BOOLEAN_OR;
use const T_BOOL_CAST;
use const T_BREAK;
use const T_CALLABLE;
use const T_CASE;
use const T_CATCH;
use const T_CLASS;
use const T_CLASS_C;
use const T_CLONE;
use const T_CLOSE_TAG;
use const T_CONCAT_EQUAL;
use const T_CONST;
use const T_CONTINUE;
use const T_CURLY_OPEN;
use const T_DEC;
use const T_DECLARE;
use const T_DEFAULT;
use const T_DIR;
use const T_DIV_EQUAL;
use const T_DNUMBER;
use const T_DO;
use const T_DOLLAR_OPEN_CURLY_BRACES;
use const T_DOUBLE_ARROW;
use const T_DOUBLE_CAST;
use const T_DOUBLE_COLON;
use const T_ECHO;
use const T_ELLIPSIS;
use const T_ELSE;
use const T_ELSEIF;
use const T_EMPTY;
use const T_ENDDECLARE;
use const T_ENDFOR;
use const T_ENDFOREACH;
use const T_ENDIF;
use const T_ENDSWITCH;
use const T_ENDWHILE;
use const T_END_HEREDOC;
use const T_EVAL;
use const T_EXIT;
use const T_EXTENDS;
use const T_FILE;
use const T_FINAL;
use const T_FINALLY;
use const T_FOR;
use const T_FOREACH;
use const T_FUNCTION;
use const T_FUNC_C;
use const T_GLOBAL;
use const T_GOTO;
use const T_IF;
use const T_IMPLEMENTS;
use const T_INC;
use const T_INCLUDE;
use const T_INCLUDE_ONCE;
use const T_INSTANCEOF;
use const T_INSTEADOF;
use const T_INTERFACE;
use const T_INT_CAST;
use const T_ISSET;
use const T_IS_EQUAL;
use const T_IS_GREATER_OR_EQUAL;
use const T_IS_IDENTICAL;
use const T_IS_NOT_EQUAL;
use const T_IS_NOT_IDENTICAL;
use const T_IS_SMALLER_OR_EQUAL;
use const T_LINE;
use const T_LIST;
use const T_LNUMBER;
use const T_LOGICAL_AND;
use const T_LOGICAL_OR;
use const T_LOGICAL_XOR;
use const T_METHOD_C;
use const T_MINUS_EQUAL;
use const T_MOD_EQUAL;
use const T_MUL_EQUAL;
use const T_NAMESPACE;
use const T_NEW;
use const T_NS_C;
use const T_NS_SEPARATOR;
use const T_NUM_STRING;
use const T_OBJECT_CAST;
use const T_OBJECT_OPERATOR;
use const T_OPEN_TAG;
use const T_OPEN_TAG_WITH_ECHO;
use const T_OR_EQUAL;
use const T_PLUS_EQUAL;
use const T_POW;
use const T_POW_EQUAL;
use const T_PRINT;
use const T_PRIVATE;
use const T_PROTECTED;
use const T_PUBLIC;
use const T_REQUIRE;
use const T_REQUIRE_ONCE;
use const T_RETURN;
use const T_SL;
use const T_SL_EQUAL;
use const T_SPACESHIP;
use const T_SR;
use const T_SR_EQUAL;
use const T_STATIC;
use const T_STRING_CAST;
use const T_SWITCH;
use const T_THROW;
use const T_TRAIT;
use const T_TRAIT_C;
use const T_TRY;
use const T_UNSET;
use const T_UNSET_CAST;
use const T_USE;
use const T_VAR;
use const T_WHILE;
use const T_WHITESPACE;
use const T_XOR_EQUAL;
use const T_YIELD;
use const T_YIELD_FROM;

class PhpLexer extends \PhpParser\Lexer
{

    /**
     * @param mixed[] $options
     */
    public function __construct(array $options = [])
    {
        parent::__construct($options);

        $this->dropTokens = [
            T_ABSTRACT => 1,
            T_AND_EQUAL => 1,
            T_ARRAY => 1,
            T_ARRAY_CAST => 1,
            T_AS => 1,
            //T_BAD_CHARACTER => 1, // undefined
            T_BOOLEAN_AND => 1,
            T_BOOLEAN_OR => 1,
            T_BOOL_CAST => 1,
            T_BREAK => 1,
            T_CALLABLE => 1,
            T_CASE => 1,
            T_CATCH => 1,
            //T_CHARACTER => 1, // undefined
            T_CLASS => 1,
            T_CLASS_C => 1,
            T_CLONE => 1,
            T_CLOSE_TAG => 1,
            //T_COMMENT => 1,
            T_CONCAT_EQUAL => 1,
            T_CONST => 1,
            //T_CONSTANT_ENCAPSED_STRING => 1,
            T_CONTINUE => 1,
            T_CURLY_OPEN => 1,
            T_DEC => 1,
            T_DECLARE => 1,
            T_DEFAULT => 1,
            T_DIR => 1,
            T_DIV_EQUAL => 1,
            T_DNUMBER => 1,
            //T_DOC_COMMENT => 1,
            T_DO => 1,
            T_DOLLAR_OPEN_CURLY_BRACES => 1,
            T_DOUBLE_ARROW => 1,
            T_DOUBLE_CAST => 1,
            T_DOUBLE_COLON => 1,
            T_ECHO => 1,
            T_ELLIPSIS => 1,
            T_ELSE => 1,
            T_ELSEIF => 1,
            T_EMPTY => 1,
            //T_ENCAPSED_AND_WHITESPACE => 1,
            T_ENDDECLARE => 1,
            T_ENDFOR => 1,
            T_ENDFOREACH => 1,
            T_ENDIF => 1,
            T_ENDSWITCH => 1,
            T_ENDWHILE => 1,
            T_END_HEREDOC => 1,
            T_EVAL => 1,
            T_EXIT => 1,
            T_EXTENDS => 1,
            T_FILE => 1,
            T_FINAL => 1,
            T_FINALLY => 1,
            T_FOR => 1,
            T_FOREACH => 1,
            T_FUNCTION => 1,
            T_FUNC_C => 1,
            T_GLOBAL => 1,
            T_GOTO => 1,
            //T_HALT_COMPILER => 1,
            T_IF => 1,
            T_IMPLEMENTS => 1,
            T_INC => 1,
            T_INCLUDE => 1,
            T_INCLUDE_ONCE => 1,
            //T_INLINE_HTML => 1,
            T_INSTANCEOF => 1,
            T_INSTEADOF => 1,
            T_INT_CAST => 1,
            T_INTERFACE => 1,
            T_ISSET => 1,
            T_IS_EQUAL => 1,
            T_IS_GREATER_OR_EQUAL => 1,
            T_IS_IDENTICAL => 1,
            T_IS_NOT_EQUAL => 1,
            T_IS_NOT_IDENTICAL => 1,
            T_IS_SMALLER_OR_EQUAL => 1,
            T_SPACESHIP => 1,
            T_LINE => 1,
            T_LIST => 1,
            T_LNUMBER => 1,
            T_LOGICAL_AND => 1,
            T_LOGICAL_OR => 1,
            T_LOGICAL_XOR => 1,
            T_METHOD_C => 1,
            T_MINUS_EQUAL => 1,
            T_MOD_EQUAL => 1,
            T_MUL_EQUAL => 1,
            T_NAMESPACE => 1,
            T_NS_C => 1,
            T_NS_SEPARATOR => 1,
            T_NEW => 1,
            T_NUM_STRING => 1,
            T_OBJECT_CAST => 1,
            T_OBJECT_OPERATOR => 1,
            T_OPEN_TAG => 1,
            T_OPEN_TAG_WITH_ECHO => 1,
            T_OR_EQUAL => 1,
            T_PLUS_EQUAL => 1,
            T_POW => 1,
            T_POW_EQUAL => 1,
            T_PRINT => 1,
            T_PRIVATE => 1,
            T_PUBLIC => 1,
            T_PROTECTED => 1,
            T_REQUIRE => 1,
            T_REQUIRE_ONCE => 1,
            T_RETURN => 1,
            T_SL => 1,
            T_SL_EQUAL => 1,
            T_SR => 1,
            T_SR_EQUAL => 1,
            //T_START_HEREDOC => 1,
            T_STATIC => 1,
            //T_STRING => 1,
            T_STRING_CAST => 1,
            //T_STRING_VARNAME => 1,
            T_SWITCH => 1,
            T_THROW => 1,
            T_TRAIT => 1,
            T_TRAIT_C => 1,
            T_TRY => 1,
            T_UNSET => 1,
            T_UNSET_CAST => 1,
            T_USE => 1,
            T_VAR => 1,
            //T_VARIABLE => 1,
            T_WHILE => 1,
            T_WHITESPACE => 1,
            T_XOR_EQUAL => 1,
            T_YIELD => 1,
            T_YIELD_FROM => 1,
        ];
    }

}
